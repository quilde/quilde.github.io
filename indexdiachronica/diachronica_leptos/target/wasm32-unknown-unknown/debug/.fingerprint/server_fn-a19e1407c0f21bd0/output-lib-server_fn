{"message":"`impl Trait` only allowed in function and inherent method return types, not in trait method return types","code":{"code":"E0562","explanation":"Abstract return types (written `impl Trait` for some trait `Trait`) are only\nallowed as function and inherent impl return types.\n\nErroneous code example:\n\n```compile_fail,E0562\nfn main() {\n    let count_to_ten: impl Iterator<Item=usize> = 0..10;\n    // error: `impl Trait` not allowed outside of function and inherent method\n    //        return types\n    for i in count_to_ten {\n        println!(\"{}\", i);\n    }\n}\n```\n\nMake sure `impl Trait` only appears in return-type position.\n\n```\nfn count_to_n(n: usize) -> impl Iterator<Item=usize> {\n    0..n\n}\n\nfn main() {\n    for i in count_to_n(10) {  // ok!\n        println!(\"{}\", i);\n    }\n}\n```\n\nSee [RFC 1522] for more details.\n\n[RFC 1522]: https://github.com/rust-lang/rfcs/blob/master/text/1522-conservative-impl-trait.md\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\client.rs","byte_start":1225,"byte_end":1300,"line_start":33,"line_end":33,"column_start":10,"column_end":85,"is_primary":true,"text":[{"text":"    ) -> impl Future<Output = Result<Self::Response, ServerFnError<CustErr>>> + Send;","highlight_start":10,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0562]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: `impl Trait` only allowed in function and inherent method return types, not in trait method return types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\client.rs:33:10\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> impl Future<Output = Result<Self::Response, ServerFnError<CustErr>>> + Send;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\u001b[0m\n\n"}
{"message":"`impl Trait` only allowed in function and inherent method return types, not in `impl` method return types","code":{"code":"E0562","explanation":"Abstract return types (written `impl Trait` for some trait `Trait`) are only\nallowed as function and inherent impl return types.\n\nErroneous code example:\n\n```compile_fail,E0562\nfn main() {\n    let count_to_ten: impl Iterator<Item=usize> = 0..10;\n    // error: `impl Trait` not allowed outside of function and inherent method\n    //        return types\n    for i in count_to_ten {\n        println!(\"{}\", i);\n    }\n}\n```\n\nMake sure `impl Trait` only appears in return-type position.\n\n```\nfn count_to_n(n: usize) -> impl Iterator<Item=usize> {\n    0..n\n}\n\nfn main() {\n    for i in count_to_n(10) {  // ok!\n        println!(\"{}\", i);\n    }\n}\n```\n\nSee [RFC 1522] for more details.\n\n[RFC 1522]: https://github.com/rust-lang/rfcs/blob/master/text/1522-conservative-impl-trait.md\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\client.rs","byte_start":1935,"byte_end":2025,"line_start":56,"line_end":57,"column_start":14,"column_end":22,"is_primary":true,"text":[{"text":"        ) -> impl Future<Output = Result<Self::Response, ServerFnError<CustErr>>>","highlight_start":14,"highlight_end":82},{"text":"               + Send {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0562]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: `impl Trait` only allowed in function and inherent method return types, not in `impl` method return types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\client.rs:56:14\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        ) -> impl Future<Output = Result<Self::Response, ServerFnError<CustErr>>>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m______________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m57\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m               + Send {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____________________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\u001b[0m\n\n"}
{"message":"functions in traits cannot be declared `async`","code":{"code":"E0706","explanation":"`async fn`s are not yet supported in traits in Rust.\n\nErroneous code example:\n\n```compile_fail,edition2018\ntrait T {\n    // Neither case is currently supported.\n    async fn foo() {}\n    async fn bar(&self) {}\n}\n```\n\n`async fn`s return an `impl Future`, making the following two examples\nequivalent:\n\n```edition2018,ignore (example-of-desugaring-equivalence)\nasync fn foo() -> User {\n    unimplemented!()\n}\n// The async fn above gets desugared as follows:\nfn foo(&self) -> impl Future<Output = User> + '_ {\n    unimplemented!()\n}\n```\n\nBut when it comes to supporting this in traits, there are [a few implementation\nissues][async-is-hard]. One of them is returning `impl Trait` in traits is not\nsupported, as it would require [Generic Associated Types] to be supported:\n\n```edition2018,ignore (example-of-desugaring-equivalence)\nimpl MyDatabase {\n    async fn get_user(&self) -> User {\n        unimplemented!()\n    }\n}\n\nimpl MyDatabase {\n    fn get_user(&self) -> impl Future<Output = User> + '_ {\n        unimplemented!()\n    }\n}\n```\n\nUntil these issues are resolved, you can use the [`async-trait` crate], allowing\nyou to use `async fn` in traits by desugaring to \"boxed futures\"\n(`Pin<Box<dyn Future + Send + 'async>>`).\n\nNote that using these trait methods will result in a heap allocation\nper-function-call. This is not a significant cost for the vast majority of\napplications, but should be considered when deciding whether to use this\nfunctionality in the public API of a low-level function that is expected to be\ncalled millions of times a second.\n\nYou might be interested in visiting the [async book] for further information.\n\n[`async-trait` crate]: https://crates.io/crates/async-trait\n[async-is-hard]: https://smallcultfollowing.com/babysteps/blog/2019/10/26/async-fn-in-traits-are-hard/\n[Generic Associated Types]: https://github.com/rust-lang/rust/issues/44265\n[async book]: https://rust-lang.github.io/async-book/07_workarounds/05_async_in_traits.html\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\cbor.rs","byte_start":1201,"byte_end":1206,"line_start":46,"line_end":46,"column_start":5,"column_end":10,"is_primary":false,"text":[{"text":"    async fn from_req(req: Request) -> Result<Self, ServerFnError<CustErr>> {","highlight_start":5,"highlight_end":10}],"label":"`async` because of this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\cbor.rs","byte_start":1201,"byte_end":1272,"line_start":46,"line_end":46,"column_start":5,"column_end":76,"is_primary":true,"text":[{"text":"    async fn from_req(req: Request) -> Result<Self, ServerFnError<CustErr>> {","highlight_start":5,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`async` trait functions are not currently supported","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using the `async-trait` crate: https://crates.io/crates/async-trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0706]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: functions in traits cannot be declared `async`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\cbor.rs:46:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn from_req(req: Request) -> Result<Self, ServerFnError<CustErr>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m`async` because of this\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `async` trait functions are not currently supported\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: consider using the `async-trait` crate: https://crates.io/crates/async-trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\u001b[0m\n\n"}
{"message":"functions in traits cannot be declared `async`","code":{"code":"E0706","explanation":"`async fn`s are not yet supported in traits in Rust.\n\nErroneous code example:\n\n```compile_fail,edition2018\ntrait T {\n    // Neither case is currently supported.\n    async fn foo() {}\n    async fn bar(&self) {}\n}\n```\n\n`async fn`s return an `impl Future`, making the following two examples\nequivalent:\n\n```edition2018,ignore (example-of-desugaring-equivalence)\nasync fn foo() -> User {\n    unimplemented!()\n}\n// The async fn above gets desugared as follows:\nfn foo(&self) -> impl Future<Output = User> + '_ {\n    unimplemented!()\n}\n```\n\nBut when it comes to supporting this in traits, there are [a few implementation\nissues][async-is-hard]. One of them is returning `impl Trait` in traits is not\nsupported, as it would require [Generic Associated Types] to be supported:\n\n```edition2018,ignore (example-of-desugaring-equivalence)\nimpl MyDatabase {\n    async fn get_user(&self) -> User {\n        unimplemented!()\n    }\n}\n\nimpl MyDatabase {\n    fn get_user(&self) -> impl Future<Output = User> + '_ {\n        unimplemented!()\n    }\n}\n```\n\nUntil these issues are resolved, you can use the [`async-trait` crate], allowing\nyou to use `async fn` in traits by desugaring to \"boxed futures\"\n(`Pin<Box<dyn Future + Send + 'async>>`).\n\nNote that using these trait methods will result in a heap allocation\nper-function-call. This is not a significant cost for the vast majority of\napplications, but should be considered when deciding whether to use this\nfunctionality in the public API of a low-level function that is expected to be\ncalled millions of times a second.\n\nYou might be interested in visiting the [async book] for further information.\n\n[`async-trait` crate]: https://crates.io/crates/async-trait\n[async-is-hard]: https://smallcultfollowing.com/babysteps/blog/2019/10/26/async-fn-in-traits-are-hard/\n[Generic Associated Types]: https://github.com/rust-lang/rust/issues/44265\n[async book]: https://rust-lang.github.io/async-book/07_workarounds/05_async_in_traits.html\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\cbor.rs","byte_start":1585,"byte_end":1590,"line_start":58,"line_end":58,"column_start":5,"column_end":10,"is_primary":false,"text":[{"text":"    async fn into_res(self) -> Result<Response, ServerFnError<CustErr>> {","highlight_start":5,"highlight_end":10}],"label":"`async` because of this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\cbor.rs","byte_start":1585,"byte_end":1652,"line_start":58,"line_end":58,"column_start":5,"column_end":72,"is_primary":true,"text":[{"text":"    async fn into_res(self) -> Result<Response, ServerFnError<CustErr>> {","highlight_start":5,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`async` trait functions are not currently supported","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using the `async-trait` crate: https://crates.io/crates/async-trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0706]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: functions in traits cannot be declared `async`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\cbor.rs:58:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m58\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn into_res(self) -> Result<Response, ServerFnError<CustErr>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m`async` because of this\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `async` trait functions are not currently supported\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: consider using the `async-trait` crate: https://crates.io/crates/async-trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\u001b[0m\n\n"}
{"message":"functions in traits cannot be declared `async`","code":{"code":"E0706","explanation":"`async fn`s are not yet supported in traits in Rust.\n\nErroneous code example:\n\n```compile_fail,edition2018\ntrait T {\n    // Neither case is currently supported.\n    async fn foo() {}\n    async fn bar(&self) {}\n}\n```\n\n`async fn`s return an `impl Future`, making the following two examples\nequivalent:\n\n```edition2018,ignore (example-of-desugaring-equivalence)\nasync fn foo() -> User {\n    unimplemented!()\n}\n// The async fn above gets desugared as follows:\nfn foo(&self) -> impl Future<Output = User> + '_ {\n    unimplemented!()\n}\n```\n\nBut when it comes to supporting this in traits, there are [a few implementation\nissues][async-is-hard]. One of them is returning `impl Trait` in traits is not\nsupported, as it would require [Generic Associated Types] to be supported:\n\n```edition2018,ignore (example-of-desugaring-equivalence)\nimpl MyDatabase {\n    async fn get_user(&self) -> User {\n        unimplemented!()\n    }\n}\n\nimpl MyDatabase {\n    fn get_user(&self) -> impl Future<Output = User> + '_ {\n        unimplemented!()\n    }\n}\n```\n\nUntil these issues are resolved, you can use the [`async-trait` crate], allowing\nyou to use `async fn` in traits by desugaring to \"boxed futures\"\n(`Pin<Box<dyn Future + Send + 'async>>`).\n\nNote that using these trait methods will result in a heap allocation\nper-function-call. This is not a significant cost for the vast majority of\napplications, but should be considered when deciding whether to use this\nfunctionality in the public API of a low-level function that is expected to be\ncalled millions of times a second.\n\nYou might be interested in visiting the [async book] for further information.\n\n[`async-trait` crate]: https://crates.io/crates/async-trait\n[async-is-hard]: https://smallcultfollowing.com/babysteps/blog/2019/10/26/async-fn-in-traits-are-hard/\n[Generic Associated Types]: https://github.com/rust-lang/rust/issues/44265\n[async book]: https://rust-lang.github.io/async-book/07_workarounds/05_async_in_traits.html\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\cbor.rs","byte_start":2062,"byte_end":2067,"line_start":71,"line_end":71,"column_start":5,"column_end":10,"is_primary":false,"text":[{"text":"    async fn from_res(res: Response) -> Result<Self, ServerFnError<CustErr>> {","highlight_start":5,"highlight_end":10}],"label":"`async` because of this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\cbor.rs","byte_start":2062,"byte_end":2134,"line_start":71,"line_end":71,"column_start":5,"column_end":77,"is_primary":true,"text":[{"text":"    async fn from_res(res: Response) -> Result<Self, ServerFnError<CustErr>> {","highlight_start":5,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`async` trait functions are not currently supported","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using the `async-trait` crate: https://crates.io/crates/async-trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0706]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: functions in traits cannot be declared `async`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\cbor.rs:71:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m71\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn from_res(res: Response) -> Result<Self, ServerFnError<CustErr>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m`async` because of this\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `async` trait functions are not currently supported\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: consider using the `async-trait` crate: https://crates.io/crates/async-trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\u001b[0m\n\n"}
{"message":"functions in traits cannot be declared `async`","code":{"code":"E0706","explanation":"`async fn`s are not yet supported in traits in Rust.\n\nErroneous code example:\n\n```compile_fail,edition2018\ntrait T {\n    // Neither case is currently supported.\n    async fn foo() {}\n    async fn bar(&self) {}\n}\n```\n\n`async fn`s return an `impl Future`, making the following two examples\nequivalent:\n\n```edition2018,ignore (example-of-desugaring-equivalence)\nasync fn foo() -> User {\n    unimplemented!()\n}\n// The async fn above gets desugared as follows:\nfn foo(&self) -> impl Future<Output = User> + '_ {\n    unimplemented!()\n}\n```\n\nBut when it comes to supporting this in traits, there are [a few implementation\nissues][async-is-hard]. One of them is returning `impl Trait` in traits is not\nsupported, as it would require [Generic Associated Types] to be supported:\n\n```edition2018,ignore (example-of-desugaring-equivalence)\nimpl MyDatabase {\n    async fn get_user(&self) -> User {\n        unimplemented!()\n    }\n}\n\nimpl MyDatabase {\n    fn get_user(&self) -> impl Future<Output = User> + '_ {\n        unimplemented!()\n    }\n}\n```\n\nUntil these issues are resolved, you can use the [`async-trait` crate], allowing\nyou to use `async fn` in traits by desugaring to \"boxed futures\"\n(`Pin<Box<dyn Future + Send + 'async>>`).\n\nNote that using these trait methods will result in a heap allocation\nper-function-call. This is not a significant cost for the vast majority of\napplications, but should be considered when deciding whether to use this\nfunctionality in the public API of a low-level function that is expected to be\ncalled millions of times a second.\n\nYou might be interested in visiting the [async book] for further information.\n\n[`async-trait` crate]: https://crates.io/crates/async-trait\n[async-is-hard]: https://smallcultfollowing.com/babysteps/blog/2019/10/26/async-fn-in-traits-are-hard/\n[Generic Associated Types]: https://github.com/rust-lang/rust/issues/44265\n[async book]: https://rust-lang.github.io/async-book/07_workarounds/05_async_in_traits.html\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\json.rs","byte_start":1060,"byte_end":1065,"line_start":39,"line_end":39,"column_start":5,"column_end":10,"is_primary":false,"text":[{"text":"    async fn from_req(req: Request) -> Result<Self, ServerFnError<CustErr>> {","highlight_start":5,"highlight_end":10}],"label":"`async` because of this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\json.rs","byte_start":1060,"byte_end":1131,"line_start":39,"line_end":39,"column_start":5,"column_end":76,"is_primary":true,"text":[{"text":"    async fn from_req(req: Request) -> Result<Self, ServerFnError<CustErr>> {","highlight_start":5,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`async` trait functions are not currently supported","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using the `async-trait` crate: https://crates.io/crates/async-trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0706]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: functions in traits cannot be declared `async`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\json.rs:39:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn from_req(req: Request) -> Result<Self, ServerFnError<CustErr>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m`async` because of this\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `async` trait functions are not currently supported\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: consider using the `async-trait` crate: https://crates.io/crates/async-trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\u001b[0m\n\n"}
{"message":"functions in traits cannot be declared `async`","code":{"code":"E0706","explanation":"`async fn`s are not yet supported in traits in Rust.\n\nErroneous code example:\n\n```compile_fail,edition2018\ntrait T {\n    // Neither case is currently supported.\n    async fn foo() {}\n    async fn bar(&self) {}\n}\n```\n\n`async fn`s return an `impl Future`, making the following two examples\nequivalent:\n\n```edition2018,ignore (example-of-desugaring-equivalence)\nasync fn foo() -> User {\n    unimplemented!()\n}\n// The async fn above gets desugared as follows:\nfn foo(&self) -> impl Future<Output = User> + '_ {\n    unimplemented!()\n}\n```\n\nBut when it comes to supporting this in traits, there are [a few implementation\nissues][async-is-hard]. One of them is returning `impl Trait` in traits is not\nsupported, as it would require [Generic Associated Types] to be supported:\n\n```edition2018,ignore (example-of-desugaring-equivalence)\nimpl MyDatabase {\n    async fn get_user(&self) -> User {\n        unimplemented!()\n    }\n}\n\nimpl MyDatabase {\n    fn get_user(&self) -> impl Future<Output = User> + '_ {\n        unimplemented!()\n    }\n}\n```\n\nUntil these issues are resolved, you can use the [`async-trait` crate], allowing\nyou to use `async fn` in traits by desugaring to \"boxed futures\"\n(`Pin<Box<dyn Future + Send + 'async>>`).\n\nNote that using these trait methods will result in a heap allocation\nper-function-call. This is not a significant cost for the vast majority of\napplications, but should be considered when deciding whether to use this\nfunctionality in the public API of a low-level function that is expected to be\ncalled millions of times a second.\n\nYou might be interested in visiting the [async book] for further information.\n\n[`async-trait` crate]: https://crates.io/crates/async-trait\n[async-is-hard]: https://smallcultfollowing.com/babysteps/blog/2019/10/26/async-fn-in-traits-are-hard/\n[Generic Associated Types]: https://github.com/rust-lang/rust/issues/44265\n[async book]: https://rust-lang.github.io/async-book/07_workarounds/05_async_in_traits.html\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\json.rs","byte_start":1442,"byte_end":1447,"line_start":51,"line_end":51,"column_start":5,"column_end":10,"is_primary":false,"text":[{"text":"    async fn into_res(self) -> Result<Response, ServerFnError<CustErr>> {","highlight_start":5,"highlight_end":10}],"label":"`async` because of this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\json.rs","byte_start":1442,"byte_end":1509,"line_start":51,"line_end":51,"column_start":5,"column_end":72,"is_primary":true,"text":[{"text":"    async fn into_res(self) -> Result<Response, ServerFnError<CustErr>> {","highlight_start":5,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`async` trait functions are not currently supported","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using the `async-trait` crate: https://crates.io/crates/async-trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0706]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: functions in traits cannot be declared `async`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\json.rs:51:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn into_res(self) -> Result<Response, ServerFnError<CustErr>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m`async` because of this\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `async` trait functions are not currently supported\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: consider using the `async-trait` crate: https://crates.io/crates/async-trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\u001b[0m\n\n"}
{"message":"functions in traits cannot be declared `async`","code":{"code":"E0706","explanation":"`async fn`s are not yet supported in traits in Rust.\n\nErroneous code example:\n\n```compile_fail,edition2018\ntrait T {\n    // Neither case is currently supported.\n    async fn foo() {}\n    async fn bar(&self) {}\n}\n```\n\n`async fn`s return an `impl Future`, making the following two examples\nequivalent:\n\n```edition2018,ignore (example-of-desugaring-equivalence)\nasync fn foo() -> User {\n    unimplemented!()\n}\n// The async fn above gets desugared as follows:\nfn foo(&self) -> impl Future<Output = User> + '_ {\n    unimplemented!()\n}\n```\n\nBut when it comes to supporting this in traits, there are [a few implementation\nissues][async-is-hard]. One of them is returning `impl Trait` in traits is not\nsupported, as it would require [Generic Associated Types] to be supported:\n\n```edition2018,ignore (example-of-desugaring-equivalence)\nimpl MyDatabase {\n    async fn get_user(&self) -> User {\n        unimplemented!()\n    }\n}\n\nimpl MyDatabase {\n    fn get_user(&self) -> impl Future<Output = User> + '_ {\n        unimplemented!()\n    }\n}\n```\n\nUntil these issues are resolved, you can use the [`async-trait` crate], allowing\nyou to use `async fn` in traits by desugaring to \"boxed futures\"\n(`Pin<Box<dyn Future + Send + 'async>>`).\n\nNote that using these trait methods will result in a heap allocation\nper-function-call. This is not a significant cost for the vast majority of\napplications, but should be considered when deciding whether to use this\nfunctionality in the public API of a low-level function that is expected to be\ncalled millions of times a second.\n\nYou might be interested in visiting the [async book] for further information.\n\n[`async-trait` crate]: https://crates.io/crates/async-trait\n[async-is-hard]: https://smallcultfollowing.com/babysteps/blog/2019/10/26/async-fn-in-traits-are-hard/\n[Generic Associated Types]: https://github.com/rust-lang/rust/issues/44265\n[async book]: https://rust-lang.github.io/async-book/07_workarounds/05_async_in_traits.html\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\json.rs","byte_start":1852,"byte_end":1857,"line_start":63,"line_end":63,"column_start":5,"column_end":10,"is_primary":false,"text":[{"text":"    async fn from_res(res: Response) -> Result<Self, ServerFnError<CustErr>> {","highlight_start":5,"highlight_end":10}],"label":"`async` because of this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\json.rs","byte_start":1852,"byte_end":1924,"line_start":63,"line_end":63,"column_start":5,"column_end":77,"is_primary":true,"text":[{"text":"    async fn from_res(res: Response) -> Result<Self, ServerFnError<CustErr>> {","highlight_start":5,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`async` trait functions are not currently supported","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using the `async-trait` crate: https://crates.io/crates/async-trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0706]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: functions in traits cannot be declared `async`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\json.rs:63:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn from_res(res: Response) -> Result<Self, ServerFnError<CustErr>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m`async` because of this\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `async` trait functions are not currently supported\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: consider using the `async-trait` crate: https://crates.io/crates/async-trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\u001b[0m\n\n"}
{"message":"functions in traits cannot be declared `async`","code":{"code":"E0706","explanation":"`async fn`s are not yet supported in traits in Rust.\n\nErroneous code example:\n\n```compile_fail,edition2018\ntrait T {\n    // Neither case is currently supported.\n    async fn foo() {}\n    async fn bar(&self) {}\n}\n```\n\n`async fn`s return an `impl Future`, making the following two examples\nequivalent:\n\n```edition2018,ignore (example-of-desugaring-equivalence)\nasync fn foo() -> User {\n    unimplemented!()\n}\n// The async fn above gets desugared as follows:\nfn foo(&self) -> impl Future<Output = User> + '_ {\n    unimplemented!()\n}\n```\n\nBut when it comes to supporting this in traits, there are [a few implementation\nissues][async-is-hard]. One of them is returning `impl Trait` in traits is not\nsupported, as it would require [Generic Associated Types] to be supported:\n\n```edition2018,ignore (example-of-desugaring-equivalence)\nimpl MyDatabase {\n    async fn get_user(&self) -> User {\n        unimplemented!()\n    }\n}\n\nimpl MyDatabase {\n    fn get_user(&self) -> impl Future<Output = User> + '_ {\n        unimplemented!()\n    }\n}\n```\n\nUntil these issues are resolved, you can use the [`async-trait` crate], allowing\nyou to use `async fn` in traits by desugaring to \"boxed futures\"\n(`Pin<Box<dyn Future + Send + 'async>>`).\n\nNote that using these trait methods will result in a heap allocation\nper-function-call. This is not a significant cost for the vast majority of\napplications, but should be considered when deciding whether to use this\nfunctionality in the public API of a low-level function that is expected to be\ncalled millions of times a second.\n\nYou might be interested in visiting the [async book] for further information.\n\n[`async-trait` crate]: https://crates.io/crates/async-trait\n[async-is-hard]: https://smallcultfollowing.com/babysteps/blog/2019/10/26/async-fn-in-traits-are-hard/\n[Generic Associated Types]: https://github.com/rust-lang/rust/issues/44265\n[async book]: https://rust-lang.github.io/async-book/07_workarounds/05_async_in_traits.html\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\url.rs","byte_start":1103,"byte_end":1108,"line_start":41,"line_end":41,"column_start":5,"column_end":10,"is_primary":false,"text":[{"text":"    async fn from_req(req: Request) -> Result<Self, ServerFnError<CustErr>> {","highlight_start":5,"highlight_end":10}],"label":"`async` because of this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\url.rs","byte_start":1103,"byte_end":1174,"line_start":41,"line_end":41,"column_start":5,"column_end":76,"is_primary":true,"text":[{"text":"    async fn from_req(req: Request) -> Result<Self, ServerFnError<CustErr>> {","highlight_start":5,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`async` trait functions are not currently supported","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using the `async-trait` crate: https://crates.io/crates/async-trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0706]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: functions in traits cannot be declared `async`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\url.rs:41:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn from_req(req: Request) -> Result<Self, ServerFnError<CustErr>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m`async` because of this\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `async` trait functions are not currently supported\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: consider using the `async-trait` crate: https://crates.io/crates/async-trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\u001b[0m\n\n"}
{"message":"functions in traits cannot be declared `async`","code":{"code":"E0706","explanation":"`async fn`s are not yet supported in traits in Rust.\n\nErroneous code example:\n\n```compile_fail,edition2018\ntrait T {\n    // Neither case is currently supported.\n    async fn foo() {}\n    async fn bar(&self) {}\n}\n```\n\n`async fn`s return an `impl Future`, making the following two examples\nequivalent:\n\n```edition2018,ignore (example-of-desugaring-equivalence)\nasync fn foo() -> User {\n    unimplemented!()\n}\n// The async fn above gets desugared as follows:\nfn foo(&self) -> impl Future<Output = User> + '_ {\n    unimplemented!()\n}\n```\n\nBut when it comes to supporting this in traits, there are [a few implementation\nissues][async-is-hard]. One of them is returning `impl Trait` in traits is not\nsupported, as it would require [Generic Associated Types] to be supported:\n\n```edition2018,ignore (example-of-desugaring-equivalence)\nimpl MyDatabase {\n    async fn get_user(&self) -> User {\n        unimplemented!()\n    }\n}\n\nimpl MyDatabase {\n    fn get_user(&self) -> impl Future<Output = User> + '_ {\n        unimplemented!()\n    }\n}\n```\n\nUntil these issues are resolved, you can use the [`async-trait` crate], allowing\nyou to use `async fn` in traits by desugaring to \"boxed futures\"\n(`Pin<Box<dyn Future + Send + 'async>>`).\n\nNote that using these trait methods will result in a heap allocation\nper-function-call. This is not a significant cost for the vast majority of\napplications, but should be considered when deciding whether to use this\nfunctionality in the public API of a low-level function that is expected to be\ncalled millions of times a second.\n\nYou might be interested in visiting the [async book] for further information.\n\n[`async-trait` crate]: https://crates.io/crates/async-trait\n[async-is-hard]: https://smallcultfollowing.com/babysteps/blog/2019/10/26/async-fn-in-traits-are-hard/\n[Generic Associated Types]: https://github.com/rust-lang/rust/issues/44265\n[async book]: https://rust-lang.github.io/async-book/07_workarounds/05_async_in_traits.html\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\url.rs","byte_start":2138,"byte_end":2143,"line_start":75,"line_end":75,"column_start":5,"column_end":10,"is_primary":false,"text":[{"text":"    async fn from_req(req: Request) -> Result<Self, ServerFnError<CustErr>> {","highlight_start":5,"highlight_end":10}],"label":"`async` because of this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\url.rs","byte_start":2138,"byte_end":2209,"line_start":75,"line_end":75,"column_start":5,"column_end":76,"is_primary":true,"text":[{"text":"    async fn from_req(req: Request) -> Result<Self, ServerFnError<CustErr>> {","highlight_start":5,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`async` trait functions are not currently supported","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using the `async-trait` crate: https://crates.io/crates/async-trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0706]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: functions in traits cannot be declared `async`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\url.rs:75:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m75\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn from_req(req: Request) -> Result<Self, ServerFnError<CustErr>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m`async` because of this\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `async` trait functions are not currently supported\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: consider using the `async-trait` crate: https://crates.io/crates/async-trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\u001b[0m\n\n"}
{"message":"functions in traits cannot be declared `async`","code":{"code":"E0706","explanation":"`async fn`s are not yet supported in traits in Rust.\n\nErroneous code example:\n\n```compile_fail,edition2018\ntrait T {\n    // Neither case is currently supported.\n    async fn foo() {}\n    async fn bar(&self) {}\n}\n```\n\n`async fn`s return an `impl Future`, making the following two examples\nequivalent:\n\n```edition2018,ignore (example-of-desugaring-equivalence)\nasync fn foo() -> User {\n    unimplemented!()\n}\n// The async fn above gets desugared as follows:\nfn foo(&self) -> impl Future<Output = User> + '_ {\n    unimplemented!()\n}\n```\n\nBut when it comes to supporting this in traits, there are [a few implementation\nissues][async-is-hard]. One of them is returning `impl Trait` in traits is not\nsupported, as it would require [Generic Associated Types] to be supported:\n\n```edition2018,ignore (example-of-desugaring-equivalence)\nimpl MyDatabase {\n    async fn get_user(&self) -> User {\n        unimplemented!()\n    }\n}\n\nimpl MyDatabase {\n    fn get_user(&self) -> impl Future<Output = User> + '_ {\n        unimplemented!()\n    }\n}\n```\n\nUntil these issues are resolved, you can use the [`async-trait` crate], allowing\nyou to use `async fn` in traits by desugaring to \"boxed futures\"\n(`Pin<Box<dyn Future + Send + 'async>>`).\n\nNote that using these trait methods will result in a heap allocation\nper-function-call. This is not a significant cost for the vast majority of\napplications, but should be considered when deciding whether to use this\nfunctionality in the public API of a low-level function that is expected to be\ncalled millions of times a second.\n\nYou might be interested in visiting the [async book] for further information.\n\n[`async-trait` crate]: https://crates.io/crates/async-trait\n[async-is-hard]: https://smallcultfollowing.com/babysteps/blog/2019/10/26/async-fn-in-traits-are-hard/\n[Generic Associated Types]: https://github.com/rust-lang/rust/issues/44265\n[async book]: https://rust-lang.github.io/async-book/07_workarounds/05_async_in_traits.html\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\stream.rs","byte_start":1548,"byte_end":1553,"line_start":51,"line_end":51,"column_start":5,"column_end":10,"is_primary":false,"text":[{"text":"    async fn from_req(req: Request) -> Result<Self, ServerFnError<CustErr>> {","highlight_start":5,"highlight_end":10}],"label":"`async` because of this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\stream.rs","byte_start":1548,"byte_end":1619,"line_start":51,"line_end":51,"column_start":5,"column_end":76,"is_primary":true,"text":[{"text":"    async fn from_req(req: Request) -> Result<Self, ServerFnError<CustErr>> {","highlight_start":5,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`async` trait functions are not currently supported","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using the `async-trait` crate: https://crates.io/crates/async-trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0706]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: functions in traits cannot be declared `async`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\stream.rs:51:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn from_req(req: Request) -> Result<Self, ServerFnError<CustErr>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m`async` because of this\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `async` trait functions are not currently supported\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: consider using the `async-trait` crate: https://crates.io/crates/async-trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\u001b[0m\n\n"}
{"message":"functions in traits cannot be declared `async`","code":{"code":"E0706","explanation":"`async fn`s are not yet supported in traits in Rust.\n\nErroneous code example:\n\n```compile_fail,edition2018\ntrait T {\n    // Neither case is currently supported.\n    async fn foo() {}\n    async fn bar(&self) {}\n}\n```\n\n`async fn`s return an `impl Future`, making the following two examples\nequivalent:\n\n```edition2018,ignore (example-of-desugaring-equivalence)\nasync fn foo() -> User {\n    unimplemented!()\n}\n// The async fn above gets desugared as follows:\nfn foo(&self) -> impl Future<Output = User> + '_ {\n    unimplemented!()\n}\n```\n\nBut when it comes to supporting this in traits, there are [a few implementation\nissues][async-is-hard]. One of them is returning `impl Trait` in traits is not\nsupported, as it would require [Generic Associated Types] to be supported:\n\n```edition2018,ignore (example-of-desugaring-equivalence)\nimpl MyDatabase {\n    async fn get_user(&self) -> User {\n        unimplemented!()\n    }\n}\n\nimpl MyDatabase {\n    fn get_user(&self) -> impl Future<Output = User> + '_ {\n        unimplemented!()\n    }\n}\n```\n\nUntil these issues are resolved, you can use the [`async-trait` crate], allowing\nyou to use `async fn` in traits by desugaring to \"boxed futures\"\n(`Pin<Box<dyn Future + Send + 'async>>`).\n\nNote that using these trait methods will result in a heap allocation\nper-function-call. This is not a significant cost for the vast majority of\napplications, but should be considered when deciding whether to use this\nfunctionality in the public API of a low-level function that is expected to be\ncalled millions of times a second.\n\nYou might be interested in visiting the [async book] for further information.\n\n[`async-trait` crate]: https://crates.io/crates/async-trait\n[async-is-hard]: https://smallcultfollowing.com/babysteps/blog/2019/10/26/async-fn-in-traits-are-hard/\n[Generic Associated Types]: https://github.com/rust-lang/rust/issues/44265\n[async book]: https://rust-lang.github.io/async-book/07_workarounds/05_async_in_traits.html\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\stream.rs","byte_start":3449,"byte_end":3454,"line_start":117,"line_end":117,"column_start":5,"column_end":10,"is_primary":false,"text":[{"text":"    async fn into_res(self) -> Result<Response, ServerFnError<CustErr>> {","highlight_start":5,"highlight_end":10}],"label":"`async` because of this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\stream.rs","byte_start":3449,"byte_end":3516,"line_start":117,"line_end":117,"column_start":5,"column_end":72,"is_primary":true,"text":[{"text":"    async fn into_res(self) -> Result<Response, ServerFnError<CustErr>> {","highlight_start":5,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`async` trait functions are not currently supported","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using the `async-trait` crate: https://crates.io/crates/async-trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0706]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: functions in traits cannot be declared `async`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\stream.rs:117:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn into_res(self) -> Result<Response, ServerFnError<CustErr>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m`async` because of this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `async` trait functions are not currently supported\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: consider using the `async-trait` crate: https://crates.io/crates/async-trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\u001b[0m\n\n"}
{"message":"functions in traits cannot be declared `async`","code":{"code":"E0706","explanation":"`async fn`s are not yet supported in traits in Rust.\n\nErroneous code example:\n\n```compile_fail,edition2018\ntrait T {\n    // Neither case is currently supported.\n    async fn foo() {}\n    async fn bar(&self) {}\n}\n```\n\n`async fn`s return an `impl Future`, making the following two examples\nequivalent:\n\n```edition2018,ignore (example-of-desugaring-equivalence)\nasync fn foo() -> User {\n    unimplemented!()\n}\n// The async fn above gets desugared as follows:\nfn foo(&self) -> impl Future<Output = User> + '_ {\n    unimplemented!()\n}\n```\n\nBut when it comes to supporting this in traits, there are [a few implementation\nissues][async-is-hard]. One of them is returning `impl Trait` in traits is not\nsupported, as it would require [Generic Associated Types] to be supported:\n\n```edition2018,ignore (example-of-desugaring-equivalence)\nimpl MyDatabase {\n    async fn get_user(&self) -> User {\n        unimplemented!()\n    }\n}\n\nimpl MyDatabase {\n    fn get_user(&self) -> impl Future<Output = User> + '_ {\n        unimplemented!()\n    }\n}\n```\n\nUntil these issues are resolved, you can use the [`async-trait` crate], allowing\nyou to use `async fn` in traits by desugaring to \"boxed futures\"\n(`Pin<Box<dyn Future + Send + 'async>>`).\n\nNote that using these trait methods will result in a heap allocation\nper-function-call. This is not a significant cost for the vast majority of\napplications, but should be considered when deciding whether to use this\nfunctionality in the public API of a low-level function that is expected to be\ncalled millions of times a second.\n\nYou might be interested in visiting the [async book] for further information.\n\n[`async-trait` crate]: https://crates.io/crates/async-trait\n[async-is-hard]: https://smallcultfollowing.com/babysteps/blog/2019/10/26/async-fn-in-traits-are-hard/\n[Generic Associated Types]: https://github.com/rust-lang/rust/issues/44265\n[async book]: https://rust-lang.github.io/async-book/07_workarounds/05_async_in_traits.html\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\stream.rs","byte_start":3736,"byte_end":3741,"line_start":126,"line_end":126,"column_start":5,"column_end":10,"is_primary":false,"text":[{"text":"    async fn from_res(res: Response) -> Result<Self, ServerFnError<CustErr>> {","highlight_start":5,"highlight_end":10}],"label":"`async` because of this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\stream.rs","byte_start":3736,"byte_end":3808,"line_start":126,"line_end":126,"column_start":5,"column_end":77,"is_primary":true,"text":[{"text":"    async fn from_res(res: Response) -> Result<Self, ServerFnError<CustErr>> {","highlight_start":5,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`async` trait functions are not currently supported","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using the `async-trait` crate: https://crates.io/crates/async-trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0706]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: functions in traits cannot be declared `async`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\stream.rs:126:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m126\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn from_res(res: Response) -> Result<Self, ServerFnError<CustErr>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m`async` because of this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `async` trait functions are not currently supported\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: consider using the `async-trait` crate: https://crates.io/crates/async-trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\u001b[0m\n\n"}
{"message":"functions in traits cannot be declared `async`","code":{"code":"E0706","explanation":"`async fn`s are not yet supported in traits in Rust.\n\nErroneous code example:\n\n```compile_fail,edition2018\ntrait T {\n    // Neither case is currently supported.\n    async fn foo() {}\n    async fn bar(&self) {}\n}\n```\n\n`async fn`s return an `impl Future`, making the following two examples\nequivalent:\n\n```edition2018,ignore (example-of-desugaring-equivalence)\nasync fn foo() -> User {\n    unimplemented!()\n}\n// The async fn above gets desugared as follows:\nfn foo(&self) -> impl Future<Output = User> + '_ {\n    unimplemented!()\n}\n```\n\nBut when it comes to supporting this in traits, there are [a few implementation\nissues][async-is-hard]. One of them is returning `impl Trait` in traits is not\nsupported, as it would require [Generic Associated Types] to be supported:\n\n```edition2018,ignore (example-of-desugaring-equivalence)\nimpl MyDatabase {\n    async fn get_user(&self) -> User {\n        unimplemented!()\n    }\n}\n\nimpl MyDatabase {\n    fn get_user(&self) -> impl Future<Output = User> + '_ {\n        unimplemented!()\n    }\n}\n```\n\nUntil these issues are resolved, you can use the [`async-trait` crate], allowing\nyou to use `async fn` in traits by desugaring to \"boxed futures\"\n(`Pin<Box<dyn Future + Send + 'async>>`).\n\nNote that using these trait methods will result in a heap allocation\nper-function-call. This is not a significant cost for the vast majority of\napplications, but should be considered when deciding whether to use this\nfunctionality in the public API of a low-level function that is expected to be\ncalled millions of times a second.\n\nYou might be interested in visiting the [async book] for further information.\n\n[`async-trait` crate]: https://crates.io/crates/async-trait\n[async-is-hard]: https://smallcultfollowing.com/babysteps/blog/2019/10/26/async-fn-in-traits-are-hard/\n[Generic Associated Types]: https://github.com/rust-lang/rust/issues/44265\n[async book]: https://rust-lang.github.io/async-book/07_workarounds/05_async_in_traits.html\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\stream.rs","byte_start":6809,"byte_end":6814,"line_start":226,"line_end":226,"column_start":5,"column_end":10,"is_primary":false,"text":[{"text":"    async fn from_req(req: Request) -> Result<Self, ServerFnError<CustErr>> {","highlight_start":5,"highlight_end":10}],"label":"`async` because of this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\stream.rs","byte_start":6809,"byte_end":6880,"line_start":226,"line_end":226,"column_start":5,"column_end":76,"is_primary":true,"text":[{"text":"    async fn from_req(req: Request) -> Result<Self, ServerFnError<CustErr>> {","highlight_start":5,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`async` trait functions are not currently supported","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using the `async-trait` crate: https://crates.io/crates/async-trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0706]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: functions in traits cannot be declared `async`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\stream.rs:226:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m226\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn from_req(req: Request) -> Result<Self, ServerFnError<CustErr>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m`async` because of this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `async` trait functions are not currently supported\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: consider using the `async-trait` crate: https://crates.io/crates/async-trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\u001b[0m\n\n"}
{"message":"functions in traits cannot be declared `async`","code":{"code":"E0706","explanation":"`async fn`s are not yet supported in traits in Rust.\n\nErroneous code example:\n\n```compile_fail,edition2018\ntrait T {\n    // Neither case is currently supported.\n    async fn foo() {}\n    async fn bar(&self) {}\n}\n```\n\n`async fn`s return an `impl Future`, making the following two examples\nequivalent:\n\n```edition2018,ignore (example-of-desugaring-equivalence)\nasync fn foo() -> User {\n    unimplemented!()\n}\n// The async fn above gets desugared as follows:\nfn foo(&self) -> impl Future<Output = User> + '_ {\n    unimplemented!()\n}\n```\n\nBut when it comes to supporting this in traits, there are [a few implementation\nissues][async-is-hard]. One of them is returning `impl Trait` in traits is not\nsupported, as it would require [Generic Associated Types] to be supported:\n\n```edition2018,ignore (example-of-desugaring-equivalence)\nimpl MyDatabase {\n    async fn get_user(&self) -> User {\n        unimplemented!()\n    }\n}\n\nimpl MyDatabase {\n    fn get_user(&self) -> impl Future<Output = User> + '_ {\n        unimplemented!()\n    }\n}\n```\n\nUntil these issues are resolved, you can use the [`async-trait` crate], allowing\nyou to use `async fn` in traits by desugaring to \"boxed futures\"\n(`Pin<Box<dyn Future + Send + 'async>>`).\n\nNote that using these trait methods will result in a heap allocation\nper-function-call. This is not a significant cost for the vast majority of\napplications, but should be considered when deciding whether to use this\nfunctionality in the public API of a low-level function that is expected to be\ncalled millions of times a second.\n\nYou might be interested in visiting the [async book] for further information.\n\n[`async-trait` crate]: https://crates.io/crates/async-trait\n[async-is-hard]: https://smallcultfollowing.com/babysteps/blog/2019/10/26/async-fn-in-traits-are-hard/\n[Generic Associated Types]: https://github.com/rust-lang/rust/issues/44265\n[async book]: https://rust-lang.github.io/async-book/07_workarounds/05_async_in_traits.html\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\stream.rs","byte_start":7358,"byte_end":7363,"line_start":244,"line_end":244,"column_start":5,"column_end":10,"is_primary":false,"text":[{"text":"    async fn into_res(self) -> Result<Response, ServerFnError<CustErr>> {","highlight_start":5,"highlight_end":10}],"label":"`async` because of this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\stream.rs","byte_start":7358,"byte_end":7425,"line_start":244,"line_end":244,"column_start":5,"column_end":72,"is_primary":true,"text":[{"text":"    async fn into_res(self) -> Result<Response, ServerFnError<CustErr>> {","highlight_start":5,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`async` trait functions are not currently supported","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using the `async-trait` crate: https://crates.io/crates/async-trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0706]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: functions in traits cannot be declared `async`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\stream.rs:244:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m244\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn into_res(self) -> Result<Response, ServerFnError<CustErr>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m`async` because of this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `async` trait functions are not currently supported\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: consider using the `async-trait` crate: https://crates.io/crates/async-trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\u001b[0m\n\n"}
{"message":"functions in traits cannot be declared `async`","code":{"code":"E0706","explanation":"`async fn`s are not yet supported in traits in Rust.\n\nErroneous code example:\n\n```compile_fail,edition2018\ntrait T {\n    // Neither case is currently supported.\n    async fn foo() {}\n    async fn bar(&self) {}\n}\n```\n\n`async fn`s return an `impl Future`, making the following two examples\nequivalent:\n\n```edition2018,ignore (example-of-desugaring-equivalence)\nasync fn foo() -> User {\n    unimplemented!()\n}\n// The async fn above gets desugared as follows:\nfn foo(&self) -> impl Future<Output = User> + '_ {\n    unimplemented!()\n}\n```\n\nBut when it comes to supporting this in traits, there are [a few implementation\nissues][async-is-hard]. One of them is returning `impl Trait` in traits is not\nsupported, as it would require [Generic Associated Types] to be supported:\n\n```edition2018,ignore (example-of-desugaring-equivalence)\nimpl MyDatabase {\n    async fn get_user(&self) -> User {\n        unimplemented!()\n    }\n}\n\nimpl MyDatabase {\n    fn get_user(&self) -> impl Future<Output = User> + '_ {\n        unimplemented!()\n    }\n}\n```\n\nUntil these issues are resolved, you can use the [`async-trait` crate], allowing\nyou to use `async fn` in traits by desugaring to \"boxed futures\"\n(`Pin<Box<dyn Future + Send + 'async>>`).\n\nNote that using these trait methods will result in a heap allocation\nper-function-call. This is not a significant cost for the vast majority of\napplications, but should be considered when deciding whether to use this\nfunctionality in the public API of a low-level function that is expected to be\ncalled millions of times a second.\n\nYou might be interested in visiting the [async book] for further information.\n\n[`async-trait` crate]: https://crates.io/crates/async-trait\n[async-is-hard]: https://smallcultfollowing.com/babysteps/blog/2019/10/26/async-fn-in-traits-are-hard/\n[Generic Associated Types]: https://github.com/rust-lang/rust/issues/44265\n[async book]: https://rust-lang.github.io/async-book/07_workarounds/05_async_in_traits.html\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\stream.rs","byte_start":7721,"byte_end":7726,"line_start":256,"line_end":256,"column_start":5,"column_end":10,"is_primary":false,"text":[{"text":"    async fn from_res(res: Response) -> Result<Self, ServerFnError<CustErr>> {","highlight_start":5,"highlight_end":10}],"label":"`async` because of this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\stream.rs","byte_start":7721,"byte_end":7793,"line_start":256,"line_end":256,"column_start":5,"column_end":77,"is_primary":true,"text":[{"text":"    async fn from_res(res: Response) -> Result<Self, ServerFnError<CustErr>> {","highlight_start":5,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`async` trait functions are not currently supported","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using the `async-trait` crate: https://crates.io/crates/async-trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0706]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: functions in traits cannot be declared `async`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\stream.rs:256:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m256\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn from_res(res: Response) -> Result<Self, ServerFnError<CustErr>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m`async` because of this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `async` trait functions are not currently supported\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: consider using the `async-trait` crate: https://crates.io/crates/async-trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\u001b[0m\n\n"}
{"message":"`impl Trait` only allowed in function and inherent method return types, not in trait method return types","code":{"code":"E0562","explanation":"Abstract return types (written `impl Trait` for some trait `Trait`) are only\nallowed as function and inherent impl return types.\n\nErroneous code example:\n\n```compile_fail,E0562\nfn main() {\n    let count_to_ten: impl Iterator<Item=usize> = 0..10;\n    // error: `impl Trait` not allowed outside of function and inherent method\n    //        return types\n    for i in count_to_ten {\n        println!(\"{}\", i);\n    }\n}\n```\n\nMake sure `impl Trait` only appears in return-type position.\n\n```\nfn count_to_n(n: usize) -> impl Iterator<Item=usize> {\n    0..n\n}\n\nfn main() {\n    for i in count_to_n(10) {  // ok!\n        println!(\"{}\", i);\n    }\n}\n```\n\nSee [RFC 1522] for more details.\n\n[RFC 1522]: https://github.com/rust-lang/rfcs/blob/master/text/1522-conservative-impl-trait.md\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\mod.rs","byte_start":4646,"byte_end":4711,"line_start":127,"line_end":127,"column_start":10,"column_end":75,"is_primary":true,"text":[{"text":"    ) -> impl Future<Output = Result<Self, ServerFnError<CustErr>>> + Send;","highlight_start":10,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0562]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: `impl Trait` only allowed in function and inherent method return types, not in trait method return types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\mod.rs:127:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m127\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> impl Future<Output = Result<Self, ServerFnError<CustErr>>> + Send;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\u001b[0m\n\n"}
{"message":"`impl Trait` only allowed in function and inherent method return types, not in trait method return types","code":{"code":"E0562","explanation":"Abstract return types (written `impl Trait` for some trait `Trait`) are only\nallowed as function and inherent impl return types.\n\nErroneous code example:\n\n```compile_fail,E0562\nfn main() {\n    let count_to_ten: impl Iterator<Item=usize> = 0..10;\n    // error: `impl Trait` not allowed outside of function and inherent method\n    //        return types\n    for i in count_to_ten {\n        println!(\"{}\", i);\n    }\n}\n```\n\nMake sure `impl Trait` only appears in return-type position.\n\n```\nfn count_to_n(n: usize) -> impl Iterator<Item=usize> {\n    0..n\n}\n\nfn main() {\n    for i in count_to_n(10) {  // ok!\n        println!(\"{}\", i);\n    }\n}\n```\n\nSee [RFC 1522] for more details.\n\n[RFC 1522]: https://github.com/rust-lang/rfcs/blob/master/text/1522-conservative-impl-trait.md\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\mod.rs","byte_start":5886,"byte_end":5955,"line_start":159,"line_end":159,"column_start":10,"column_end":79,"is_primary":true,"text":[{"text":"    ) -> impl Future<Output = Result<Response, ServerFnError<CustErr>>> + Send;","highlight_start":10,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0562]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: `impl Trait` only allowed in function and inherent method return types, not in trait method return types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\mod.rs:159:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m159\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> impl Future<Output = Result<Response, ServerFnError<CustErr>>> + Send;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\u001b[0m\n\n"}
{"message":"`impl Trait` only allowed in function and inherent method return types, not in trait method return types","code":{"code":"E0562","explanation":"Abstract return types (written `impl Trait` for some trait `Trait`) are only\nallowed as function and inherent impl return types.\n\nErroneous code example:\n\n```compile_fail,E0562\nfn main() {\n    let count_to_ten: impl Iterator<Item=usize> = 0..10;\n    // error: `impl Trait` not allowed outside of function and inherent method\n    //        return types\n    for i in count_to_ten {\n        println!(\"{}\", i);\n    }\n}\n```\n\nMake sure `impl Trait` only appears in return-type position.\n\n```\nfn count_to_n(n: usize) -> impl Iterator<Item=usize> {\n    0..n\n}\n\nfn main() {\n    for i in count_to_n(10) {  // ok!\n        println!(\"{}\", i);\n    }\n}\n```\n\nSee [RFC 1522] for more details.\n\n[RFC 1522]: https://github.com/rust-lang/rfcs/blob/master/text/1522-conservative-impl-trait.md\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\mod.rs","byte_start":7202,"byte_end":7267,"line_start":197,"line_end":197,"column_start":10,"column_end":75,"is_primary":true,"text":[{"text":"    ) -> impl Future<Output = Result<Self, ServerFnError<CustErr>>> + Send;","highlight_start":10,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0562]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: `impl Trait` only allowed in function and inherent method return types, not in trait method return types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\mod.rs:197:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m197\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> impl Future<Output = Result<Self, ServerFnError<CustErr>>> + Send;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\u001b[0m\n\n"}
{"message":"`impl Trait` only allowed in function and inherent method return types, not in trait method return types","code":{"code":"E0562","explanation":"Abstract return types (written `impl Trait` for some trait `Trait`) are only\nallowed as function and inherent impl return types.\n\nErroneous code example:\n\n```compile_fail,E0562\nfn main() {\n    let count_to_ten: impl Iterator<Item=usize> = 0..10;\n    // error: `impl Trait` not allowed outside of function and inherent method\n    //        return types\n    for i in count_to_ten {\n        println!(\"{}\", i);\n    }\n}\n```\n\nMake sure `impl Trait` only appears in return-type position.\n\n```\nfn count_to_n(n: usize) -> impl Iterator<Item=usize> {\n    0..n\n}\n\nfn main() {\n    for i in count_to_n(10) {  // ok!\n        println!(\"{}\", i);\n    }\n}\n```\n\nSee [RFC 1522] for more details.\n\n[RFC 1522]: https://github.com/rust-lang/rfcs/blob/master/text/1522-conservative-impl-trait.md\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\request\\mod.rs","byte_start":2669,"byte_end":2735,"line_start":95,"line_end":95,"column_start":10,"column_end":76,"is_primary":true,"text":[{"text":"    ) -> impl Future<Output = Result<Bytes, ServerFnError<CustErr>>> + Send;","highlight_start":10,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0562]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: `impl Trait` only allowed in function and inherent method return types, not in trait method return types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\request\\mod.rs:95:10\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m95\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> impl Future<Output = Result<Bytes, ServerFnError<CustErr>>> + Send;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\u001b[0m\n\n"}
{"message":"`impl Trait` only allowed in function and inherent method return types, not in trait method return types","code":{"code":"E0562","explanation":"Abstract return types (written `impl Trait` for some trait `Trait`) are only\nallowed as function and inherent impl return types.\n\nErroneous code example:\n\n```compile_fail,E0562\nfn main() {\n    let count_to_ten: impl Iterator<Item=usize> = 0..10;\n    // error: `impl Trait` not allowed outside of function and inherent method\n    //        return types\n    for i in count_to_ten {\n        println!(\"{}\", i);\n    }\n}\n```\n\nMake sure `impl Trait` only appears in return-type position.\n\n```\nfn count_to_n(n: usize) -> impl Iterator<Item=usize> {\n    0..n\n}\n\nfn main() {\n    for i in count_to_n(10) {  // ok!\n        println!(\"{}\", i);\n    }\n}\n```\n\nSee [RFC 1522] for more details.\n\n[RFC 1522]: https://github.com/rust-lang/rfcs/blob/master/text/1522-conservative-impl-trait.md\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\request\\mod.rs","byte_start":2852,"byte_end":2919,"line_start":100,"line_end":100,"column_start":10,"column_end":77,"is_primary":true,"text":[{"text":"    ) -> impl Future<Output = Result<String, ServerFnError<CustErr>>> + Send;","highlight_start":10,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0562]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: `impl Trait` only allowed in function and inherent method return types, not in trait method return types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\request\\mod.rs:100:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> impl Future<Output = Result<String, ServerFnError<CustErr>>> + Send;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\u001b[0m\n\n"}
{"message":"`impl Trait` only allowed in function and inherent method return types, not in trait method return types","code":{"code":"E0562","explanation":"Abstract return types (written `impl Trait` for some trait `Trait`) are only\nallowed as function and inherent impl return types.\n\nErroneous code example:\n\n```compile_fail,E0562\nfn main() {\n    let count_to_ten: impl Iterator<Item=usize> = 0..10;\n    // error: `impl Trait` not allowed outside of function and inherent method\n    //        return types\n    for i in count_to_ten {\n        println!(\"{}\", i);\n    }\n}\n```\n\nMake sure `impl Trait` only appears in return-type position.\n\n```\nfn count_to_n(n: usize) -> impl Iterator<Item=usize> {\n    0..n\n}\n\nfn main() {\n    for i in count_to_n(10) {  // ok!\n        println!(\"{}\", i);\n    }\n}\n```\n\nSee [RFC 1522] for more details.\n\n[RFC 1522]: https://github.com/rust-lang/rfcs/blob/master/text/1522-conservative-impl-trait.md\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\request\\mod.rs","byte_start":3061,"byte_end":3126,"line_start":106,"line_end":106,"column_start":9,"column_end":74,"is_primary":true,"text":[{"text":"        impl Stream<Item = Result<Bytes, ServerFnError>> + Send + 'static,","highlight_start":9,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0562]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: `impl Trait` only allowed in function and inherent method return types, not in trait method return types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\request\\mod.rs:106:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        impl Stream<Item = Result<Bytes, ServerFnError>> + Send + 'static,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\u001b[0m\n\n"}
{"message":"functions in traits cannot be declared `async`","code":{"code":"E0706","explanation":"`async fn`s are not yet supported in traits in Rust.\n\nErroneous code example:\n\n```compile_fail,edition2018\ntrait T {\n    // Neither case is currently supported.\n    async fn foo() {}\n    async fn bar(&self) {}\n}\n```\n\n`async fn`s return an `impl Future`, making the following two examples\nequivalent:\n\n```edition2018,ignore (example-of-desugaring-equivalence)\nasync fn foo() -> User {\n    unimplemented!()\n}\n// The async fn above gets desugared as follows:\nfn foo(&self) -> impl Future<Output = User> + '_ {\n    unimplemented!()\n}\n```\n\nBut when it comes to supporting this in traits, there are [a few implementation\nissues][async-is-hard]. One of them is returning `impl Trait` in traits is not\nsupported, as it would require [Generic Associated Types] to be supported:\n\n```edition2018,ignore (example-of-desugaring-equivalence)\nimpl MyDatabase {\n    async fn get_user(&self) -> User {\n        unimplemented!()\n    }\n}\n\nimpl MyDatabase {\n    fn get_user(&self) -> impl Future<Output = User> + '_ {\n        unimplemented!()\n    }\n}\n```\n\nUntil these issues are resolved, you can use the [`async-trait` crate], allowing\nyou to use `async fn` in traits by desugaring to \"boxed futures\"\n(`Pin<Box<dyn Future + Send + 'async>>`).\n\nNote that using these trait methods will result in a heap allocation\nper-function-call. This is not a significant cost for the vast majority of\napplications, but should be considered when deciding whether to use this\nfunctionality in the public API of a low-level function that is expected to be\ncalled millions of times a second.\n\nYou might be interested in visiting the [async book] for further information.\n\n[`async-trait` crate]: https://crates.io/crates/async-trait\n[async-is-hard]: https://smallcultfollowing.com/babysteps/blog/2019/10/26/async-fn-in-traits-are-hard/\n[Generic Associated Types]: https://github.com/rust-lang/rust/issues/44265\n[async book]: https://rust-lang.github.io/async-book/07_workarounds/05_async_in_traits.html\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\request\\mod.rs","byte_start":3708,"byte_end":3713,"line_start":134,"line_end":134,"column_start":5,"column_end":10,"is_primary":false,"text":[{"text":"    async fn try_into_bytes(self) -> Result<Bytes, ServerFnError<CustErr>> {","highlight_start":5,"highlight_end":10}],"label":"`async` because of this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\request\\mod.rs","byte_start":3708,"byte_end":3778,"line_start":134,"line_end":134,"column_start":5,"column_end":75,"is_primary":true,"text":[{"text":"    async fn try_into_bytes(self) -> Result<Bytes, ServerFnError<CustErr>> {","highlight_start":5,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`async` trait functions are not currently supported","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using the `async-trait` crate: https://crates.io/crates/async-trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0706]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: functions in traits cannot be declared `async`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\request\\mod.rs:134:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m134\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn try_into_bytes(self) -> Result<Bytes, ServerFnError<CustErr>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m`async` because of this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `async` trait functions are not currently supported\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: consider using the `async-trait` crate: https://crates.io/crates/async-trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\u001b[0m\n\n"}
{"message":"functions in traits cannot be declared `async`","code":{"code":"E0706","explanation":"`async fn`s are not yet supported in traits in Rust.\n\nErroneous code example:\n\n```compile_fail,edition2018\ntrait T {\n    // Neither case is currently supported.\n    async fn foo() {}\n    async fn bar(&self) {}\n}\n```\n\n`async fn`s return an `impl Future`, making the following two examples\nequivalent:\n\n```edition2018,ignore (example-of-desugaring-equivalence)\nasync fn foo() -> User {\n    unimplemented!()\n}\n// The async fn above gets desugared as follows:\nfn foo(&self) -> impl Future<Output = User> + '_ {\n    unimplemented!()\n}\n```\n\nBut when it comes to supporting this in traits, there are [a few implementation\nissues][async-is-hard]. One of them is returning `impl Trait` in traits is not\nsupported, as it would require [Generic Associated Types] to be supported:\n\n```edition2018,ignore (example-of-desugaring-equivalence)\nimpl MyDatabase {\n    async fn get_user(&self) -> User {\n        unimplemented!()\n    }\n}\n\nimpl MyDatabase {\n    fn get_user(&self) -> impl Future<Output = User> + '_ {\n        unimplemented!()\n    }\n}\n```\n\nUntil these issues are resolved, you can use the [`async-trait` crate], allowing\nyou to use `async fn` in traits by desugaring to \"boxed futures\"\n(`Pin<Box<dyn Future + Send + 'async>>`).\n\nNote that using these trait methods will result in a heap allocation\nper-function-call. This is not a significant cost for the vast majority of\napplications, but should be considered when deciding whether to use this\nfunctionality in the public API of a low-level function that is expected to be\ncalled millions of times a second.\n\nYou might be interested in visiting the [async book] for further information.\n\n[`async-trait` crate]: https://crates.io/crates/async-trait\n[async-is-hard]: https://smallcultfollowing.com/babysteps/blog/2019/10/26/async-fn-in-traits-are-hard/\n[Generic Associated Types]: https://github.com/rust-lang/rust/issues/44265\n[async book]: https://rust-lang.github.io/async-book/07_workarounds/05_async_in_traits.html\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\request\\mod.rs","byte_start":3815,"byte_end":3820,"line_start":138,"line_end":138,"column_start":5,"column_end":10,"is_primary":false,"text":[{"text":"    async fn try_into_string(self) -> Result<String, ServerFnError<CustErr>> {","highlight_start":5,"highlight_end":10}],"label":"`async` because of this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\request\\mod.rs","byte_start":3815,"byte_end":3887,"line_start":138,"line_end":138,"column_start":5,"column_end":77,"is_primary":true,"text":[{"text":"    async fn try_into_string(self) -> Result<String, ServerFnError<CustErr>> {","highlight_start":5,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`async` trait functions are not currently supported","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using the `async-trait` crate: https://crates.io/crates/async-trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0706]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: functions in traits cannot be declared `async`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\request\\mod.rs:138:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn try_into_string(self) -> Result<String, ServerFnError<CustErr>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m`async` because of this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `async` trait functions are not currently supported\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: consider using the `async-trait` crate: https://crates.io/crates/async-trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\u001b[0m\n\n"}
{"message":"`impl Trait` only allowed in function and inherent method return types, not in `impl` method return types","code":{"code":"E0562","explanation":"Abstract return types (written `impl Trait` for some trait `Trait`) are only\nallowed as function and inherent impl return types.\n\nErroneous code example:\n\n```compile_fail,E0562\nfn main() {\n    let count_to_ten: impl Iterator<Item=usize> = 0..10;\n    // error: `impl Trait` not allowed outside of function and inherent method\n    //        return types\n    for i in count_to_ten {\n        println!(\"{}\", i);\n    }\n}\n```\n\nMake sure `impl Trait` only appears in return-type position.\n\n```\nfn count_to_n(n: usize) -> impl Iterator<Item=usize> {\n    0..n\n}\n\nfn main() {\n    for i in count_to_n(10) {  // ok!\n        println!(\"{}\", i);\n    }\n}\n```\n\nSee [RFC 1522] for more details.\n\n[RFC 1522]: https://github.com/rust-lang/rfcs/blob/master/text/1522-conservative-impl-trait.md\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\request\\mod.rs","byte_start":3983,"byte_end":4038,"line_start":145,"line_end":145,"column_start":9,"column_end":64,"is_primary":true,"text":[{"text":"        impl Stream<Item = Result<Bytes, ServerFnError>> + Send,","highlight_start":9,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0562]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: `impl Trait` only allowed in function and inherent method return types, not in `impl` method return types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\request\\mod.rs:145:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        impl Stream<Item = Result<Bytes, ServerFnError>> + Send,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\u001b[0m\n\n"}
{"message":"`impl Trait` only allowed in function and inherent method return types, not in `impl` method return types","code":{"code":"E0562","explanation":"Abstract return types (written `impl Trait` for some trait `Trait`) are only\nallowed as function and inherent impl return types.\n\nErroneous code example:\n\n```compile_fail,E0562\nfn main() {\n    let count_to_ten: impl Iterator<Item=usize> = 0..10;\n    // error: `impl Trait` not allowed outside of function and inherent method\n    //        return types\n    for i in count_to_ten {\n        println!(\"{}\", i);\n    }\n}\n```\n\nMake sure `impl Trait` only appears in return-type position.\n\n```\nfn count_to_n(n: usize) -> impl Iterator<Item=usize> {\n    0..n\n}\n\nfn main() {\n    for i in count_to_n(10) {  // ok!\n        println!(\"{}\", i);\n    }\n}\n```\n\nSee [RFC 1522] for more details.\n\n[RFC 1522]: https://github.com/rust-lang/rfcs/blob/master/text/1522-conservative-impl-trait.md\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\response\\browser.rs","byte_start":535,"byte_end":602,"line_start":18,"line_end":18,"column_start":10,"column_end":77,"is_primary":true,"text":[{"text":"    ) -> impl Future<Output = Result<String, ServerFnError<CustErr>>> + Send","highlight_start":10,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0562]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: `impl Trait` only allowed in function and inherent method return types, not in `impl` method return types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\response\\browser.rs:18:10\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> impl Future<Output = Result<String, ServerFnError<CustErr>>> + Send\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\u001b[0m\n\n"}
{"message":"`impl Trait` only allowed in function and inherent method return types, not in `impl` method return types","code":{"code":"E0562","explanation":"Abstract return types (written `impl Trait` for some trait `Trait`) are only\nallowed as function and inherent impl return types.\n\nErroneous code example:\n\n```compile_fail,E0562\nfn main() {\n    let count_to_ten: impl Iterator<Item=usize> = 0..10;\n    // error: `impl Trait` not allowed outside of function and inherent method\n    //        return types\n    for i in count_to_ten {\n        println!(\"{}\", i);\n    }\n}\n```\n\nMake sure `impl Trait` only appears in return-type position.\n\n```\nfn count_to_n(n: usize) -> impl Iterator<Item=usize> {\n    0..n\n}\n\nfn main() {\n    for i in count_to_n(10) {  // ok!\n        println!(\"{}\", i);\n    }\n}\n```\n\nSee [RFC 1522] for more details.\n\n[RFC 1522]: https://github.com/rust-lang/rfcs/blob/master/text/1522-conservative-impl-trait.md\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\response\\browser.rs","byte_start":988,"byte_end":1054,"line_start":32,"line_end":32,"column_start":10,"column_end":76,"is_primary":true,"text":[{"text":"    ) -> impl Future<Output = Result<Bytes, ServerFnError<CustErr>>> + Send","highlight_start":10,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0562]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: `impl Trait` only allowed in function and inherent method return types, not in `impl` method return types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\response\\browser.rs:32:10\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> impl Future<Output = Result<Bytes, ServerFnError<CustErr>>> + Send\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\u001b[0m\n\n"}
{"message":"`impl Trait` only allowed in function and inherent method return types, not in `impl` method return types","code":{"code":"E0562","explanation":"Abstract return types (written `impl Trait` for some trait `Trait`) are only\nallowed as function and inherent impl return types.\n\nErroneous code example:\n\n```compile_fail,E0562\nfn main() {\n    let count_to_ten: impl Iterator<Item=usize> = 0..10;\n    // error: `impl Trait` not allowed outside of function and inherent method\n    //        return types\n    for i in count_to_ten {\n        println!(\"{}\", i);\n    }\n}\n```\n\nMake sure `impl Trait` only appears in return-type position.\n\n```\nfn count_to_n(n: usize) -> impl Iterator<Item=usize> {\n    0..n\n}\n\nfn main() {\n    for i in count_to_n(10) {  // ok!\n        println!(\"{}\", i);\n    }\n}\n```\n\nSee [RFC 1522] for more details.\n\n[RFC 1522]: https://github.com/rust-lang/rfcs/blob/master/text/1522-conservative-impl-trait.md\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\response\\browser.rs","byte_start":1493,"byte_end":1558,"line_start":48,"line_end":48,"column_start":9,"column_end":74,"is_primary":true,"text":[{"text":"        impl Stream<Item = Result<Bytes, ServerFnError>> + Send + 'static,","highlight_start":9,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0562]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: `impl Trait` only allowed in function and inherent method return types, not in `impl` method return types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\response\\browser.rs:48:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        impl Stream<Item = Result<Bytes, ServerFnError>> + Send + 'static,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\u001b[0m\n\n"}
{"message":"`impl Trait` only allowed in function and inherent method return types, not in trait method return types","code":{"code":"E0562","explanation":"Abstract return types (written `impl Trait` for some trait `Trait`) are only\nallowed as function and inherent impl return types.\n\nErroneous code example:\n\n```compile_fail,E0562\nfn main() {\n    let count_to_ten: impl Iterator<Item=usize> = 0..10;\n    // error: `impl Trait` not allowed outside of function and inherent method\n    //        return types\n    for i in count_to_ten {\n        println!(\"{}\", i);\n    }\n}\n```\n\nMake sure `impl Trait` only appears in return-type position.\n\n```\nfn count_to_n(n: usize) -> impl Iterator<Item=usize> {\n    0..n\n}\n\nfn main() {\n    for i in count_to_n(10) {  // ok!\n        println!(\"{}\", i);\n    }\n}\n```\n\nSee [RFC 1522] for more details.\n\n[RFC 1522]: https://github.com/rust-lang/rfcs/blob/master/text/1522-conservative-impl-trait.md\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\response\\mod.rs","byte_start":1668,"byte_end":1735,"line_start":56,"line_end":56,"column_start":10,"column_end":77,"is_primary":true,"text":[{"text":"    ) -> impl Future<Output = Result<String, ServerFnError<CustErr>>> + Send;","highlight_start":10,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0562]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: `impl Trait` only allowed in function and inherent method return types, not in trait method return types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\response\\mod.rs:56:10\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> impl Future<Output = Result<String, ServerFnError<CustErr>>> + Send;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\u001b[0m\n\n"}
{"message":"`impl Trait` only allowed in function and inherent method return types, not in trait method return types","code":{"code":"E0562","explanation":"Abstract return types (written `impl Trait` for some trait `Trait`) are only\nallowed as function and inherent impl return types.\n\nErroneous code example:\n\n```compile_fail,E0562\nfn main() {\n    let count_to_ten: impl Iterator<Item=usize> = 0..10;\n    // error: `impl Trait` not allowed outside of function and inherent method\n    //        return types\n    for i in count_to_ten {\n        println!(\"{}\", i);\n    }\n}\n```\n\nMake sure `impl Trait` only appears in return-type position.\n\n```\nfn count_to_n(n: usize) -> impl Iterator<Item=usize> {\n    0..n\n}\n\nfn main() {\n    for i in count_to_n(10) {  // ok!\n        println!(\"{}\", i);\n    }\n}\n```\n\nSee [RFC 1522] for more details.\n\n[RFC 1522]: https://github.com/rust-lang/rfcs/blob/master/text/1522-conservative-impl-trait.md\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\response\\mod.rs","byte_start":1849,"byte_end":1915,"line_start":61,"line_end":61,"column_start":10,"column_end":76,"is_primary":true,"text":[{"text":"    ) -> impl Future<Output = Result<Bytes, ServerFnError<CustErr>>> + Send;","highlight_start":10,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0562]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: `impl Trait` only allowed in function and inherent method return types, not in trait method return types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\response\\mod.rs:61:10\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m61\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> impl Future<Output = Result<Bytes, ServerFnError<CustErr>>> + Send;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\u001b[0m\n\n"}
{"message":"`impl Trait` only allowed in function and inherent method return types, not in trait method return types","code":{"code":"E0562","explanation":"Abstract return types (written `impl Trait` for some trait `Trait`) are only\nallowed as function and inherent impl return types.\n\nErroneous code example:\n\n```compile_fail,E0562\nfn main() {\n    let count_to_ten: impl Iterator<Item=usize> = 0..10;\n    // error: `impl Trait` not allowed outside of function and inherent method\n    //        return types\n    for i in count_to_ten {\n        println!(\"{}\", i);\n    }\n}\n```\n\nMake sure `impl Trait` only appears in return-type position.\n\n```\nfn count_to_n(n: usize) -> impl Iterator<Item=usize> {\n    0..n\n}\n\nfn main() {\n    for i in count_to_n(10) {  // ok!\n        println!(\"{}\", i);\n    }\n}\n```\n\nSee [RFC 1522] for more details.\n\n[RFC 1522]: https://github.com/rust-lang/rfcs/blob/master/text/1522-conservative-impl-trait.md\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\response\\mod.rs","byte_start":2048,"byte_end":2120,"line_start":67,"line_end":67,"column_start":9,"column_end":81,"is_primary":true,"text":[{"text":"        impl Stream<Item = Result<Bytes, ServerFnError>> + Send + Sync + 'static,","highlight_start":9,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0562]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: `impl Trait` only allowed in function and inherent method return types, not in trait method return types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\response\\mod.rs:67:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        impl Stream<Item = Result<Bytes, ServerFnError>> + Send + Sync + 'static,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\u001b[0m\n\n"}
{"message":"`impl Trait` only allowed in function and inherent method return types, not in trait method return types","code":{"code":"E0562","explanation":"Abstract return types (written `impl Trait` for some trait `Trait`) are only\nallowed as function and inherent impl return types.\n\nErroneous code example:\n\n```compile_fail,E0562\nfn main() {\n    let count_to_ten: impl Iterator<Item=usize> = 0..10;\n    // error: `impl Trait` not allowed outside of function and inherent method\n    //        return types\n    for i in count_to_ten {\n        println!(\"{}\", i);\n    }\n}\n```\n\nMake sure `impl Trait` only appears in return-type position.\n\n```\nfn count_to_n(n: usize) -> impl Iterator<Item=usize> {\n    0..n\n}\n\nfn main() {\n    for i in count_to_n(10) {  // ok!\n        println!(\"{}\", i);\n    }\n}\n```\n\nSee [RFC 1522] for more details.\n\n[RFC 1522]: https://github.com/rust-lang/rfcs/blob/master/text/1522-conservative-impl-trait.md\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\lib.rs","byte_start":10068,"byte_end":10145,"line_start":237,"line_end":237,"column_start":10,"column_end":87,"is_primary":true,"text":[{"text":"    ) -> impl Future<Output = Result<Self::Output, ServerFnError<Self::Error>>> + Send;","highlight_start":10,"highlight_end":87}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0562]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: `impl Trait` only allowed in function and inherent method return types, not in trait method return types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\lib.rs:237:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m237\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> impl Future<Output = Result<Self::Output, ServerFnError<Self::Error>>> + Send;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\u001b[0m\n\n"}
{"message":"`impl Trait` only allowed in function and inherent method return types, not in trait method return types","code":{"code":"E0562","explanation":"Abstract return types (written `impl Trait` for some trait `Trait`) are only\nallowed as function and inherent impl return types.\n\nErroneous code example:\n\n```compile_fail,E0562\nfn main() {\n    let count_to_ten: impl Iterator<Item=usize> = 0..10;\n    // error: `impl Trait` not allowed outside of function and inherent method\n    //        return types\n    for i in count_to_ten {\n        println!(\"{}\", i);\n    }\n}\n```\n\nMake sure `impl Trait` only appears in return-type position.\n\n```\nfn count_to_n(n: usize) -> impl Iterator<Item=usize> {\n    0..n\n}\n\nfn main() {\n    for i in count_to_n(10) {  // ok!\n        println!(\"{}\", i);\n    }\n}\n```\n\nSee [RFC 1522] for more details.\n\n[RFC 1522]: https://github.com/rust-lang/rfcs/blob/master/text/1522-conservative-impl-trait.md\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\lib.rs","byte_start":10232,"byte_end":10281,"line_start":242,"line_end":242,"column_start":10,"column_end":59,"is_primary":true,"text":[{"text":"    ) -> impl Future<Output = Self::ServerResponse> + Send {","highlight_start":10,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0562]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: `impl Trait` only allowed in function and inherent method return types, not in trait method return types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\lib.rs:242:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m242\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> impl Future<Output = Self::ServerResponse> + Send {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\u001b[0m\n\n"}
{"message":"`impl Trait` only allowed in function and inherent method return types, not in trait method return types","code":{"code":"E0562","explanation":"Abstract return types (written `impl Trait` for some trait `Trait`) are only\nallowed as function and inherent impl return types.\n\nErroneous code example:\n\n```compile_fail,E0562\nfn main() {\n    let count_to_ten: impl Iterator<Item=usize> = 0..10;\n    // error: `impl Trait` not allowed outside of function and inherent method\n    //        return types\n    for i in count_to_ten {\n        println!(\"{}\", i);\n    }\n}\n```\n\nMake sure `impl Trait` only appears in return-type position.\n\n```\nfn count_to_n(n: usize) -> impl Iterator<Item=usize> {\n    0..n\n}\n\nfn main() {\n    for i in count_to_n(10) {  // ok!\n        println!(\"{}\", i);\n    }\n}\n```\n\nSee [RFC 1522] for more details.\n\n[RFC 1522]: https://github.com/rust-lang/rfcs/blob/master/text/1522-conservative-impl-trait.md\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\lib.rs","byte_start":12265,"byte_end":12342,"line_start":295,"line_end":295,"column_start":10,"column_end":87,"is_primary":true,"text":[{"text":"    ) -> impl Future<Output = Result<Self::Output, ServerFnError<Self::Error>>> + Send","highlight_start":10,"highlight_end":87}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0562]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: `impl Trait` only allowed in function and inherent method return types, not in trait method return types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\lib.rs:295:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m295\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> impl Future<Output = Result<Self::Output, ServerFnError<Self::Error>>> + Send\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\u001b[0m\n\n"}
{"message":"`impl Trait` only allowed in function and inherent method return types, not in trait method return types","code":{"code":"E0562","explanation":"Abstract return types (written `impl Trait` for some trait `Trait`) are only\nallowed as function and inherent impl return types.\n\nErroneous code example:\n\n```compile_fail,E0562\nfn main() {\n    let count_to_ten: impl Iterator<Item=usize> = 0..10;\n    // error: `impl Trait` not allowed outside of function and inherent method\n    //        return types\n    for i in count_to_ten {\n        println!(\"{}\", i);\n    }\n}\n```\n\nMake sure `impl Trait` only appears in return-type position.\n\n```\nfn count_to_n(n: usize) -> impl Iterator<Item=usize> {\n    0..n\n}\n\nfn main() {\n    for i in count_to_n(10) {  // ok!\n        println!(\"{}\", i);\n    }\n}\n```\n\nSee [RFC 1522] for more details.\n\n[RFC 1522]: https://github.com/rust-lang/rfcs/blob/master/text/1522-conservative-impl-trait.md\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\lib.rs","byte_start":12804,"byte_end":12881,"line_start":310,"line_end":310,"column_start":10,"column_end":87,"is_primary":true,"text":[{"text":"    ) -> impl Future<Output = Result<Self::Output, ServerFnError<Self::Error>>> + Send","highlight_start":10,"highlight_end":87}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0562]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: `impl Trait` only allowed in function and inherent method return types, not in trait method return types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\lib.rs:310:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m310\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> impl Future<Output = Result<Self::Output, ServerFnError<Self::Error>>> + Send\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\u001b[0m\n\n"}
{"message":"`impl Trait` only allowed in function and inherent method return types, not in trait method return types","code":{"code":"E0562","explanation":"Abstract return types (written `impl Trait` for some trait `Trait`) are only\nallowed as function and inherent impl return types.\n\nErroneous code example:\n\n```compile_fail,E0562\nfn main() {\n    let count_to_ten: impl Iterator<Item=usize> = 0..10;\n    // error: `impl Trait` not allowed outside of function and inherent method\n    //        return types\n    for i in count_to_ten {\n        println!(\"{}\", i);\n    }\n}\n```\n\nMake sure `impl Trait` only appears in return-type position.\n\n```\nfn count_to_n(n: usize) -> impl Iterator<Item=usize> {\n    0..n\n}\n\nfn main() {\n    for i in count_to_n(10) {  // ok!\n        println!(\"{}\", i);\n    }\n}\n```\n\nSee [RFC 1522] for more details.\n\n[RFC 1522]: https://github.com/rust-lang/rfcs/blob/master/text/1522-conservative-impl-trait.md\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\lib.rs","byte_start":14006,"byte_end":14106,"line_start":342,"line_end":344,"column_start":10,"column_end":13,"is_primary":true,"text":[{"text":"    ) -> impl Future<","highlight_start":10,"highlight_end":22},{"text":"        Output = Result<Self::ServerResponse, ServerFnError<Self::Error>>,","highlight_start":1,"highlight_end":75},{"text":"    > + Send {","highlight_start":1,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0562]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: `impl Trait` only allowed in function and inherent method return types, not in trait method return types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\lib.rs:342:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m342\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    ) -> impl Future<\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m__________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m343\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Output = Result<Self::ServerResponse, ServerFnError<Self::Error>>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m344\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    > + Send {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|____________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\u001b[0m\n\n"}
{"message":"the size for values of type `str` cannot be known at compilation time","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\json.rs","byte_start":1146,"byte_end":1157,"line_start":40,"line_end":40,"column_start":13,"column_end":24,"is_primary":true,"text":[{"text":"        let string_data = req.try_into_string().await?;","highlight_start":13,"highlight_end":24}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `Sized` is not implemented for `str`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"all local variables must have a statically known size","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"unsized locals are gated as an unstable feature","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the size for values of type `str` cannot be known at compilation time\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\json.rs:40:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let string_data = req.try_into_string().await?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the trait `Sized` is not implemented for `str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: all local variables must have a statically known size\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: unsized locals are gated as an unstable feature\u001b[0m\n\n"}
{"message":"the size for values of type `str` cannot be known at compilation time","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\json.rs","byte_start":1160,"byte_end":1188,"line_start":40,"line_end":40,"column_start":27,"column_end":55,"is_primary":true,"text":[{"text":"        let string_data = req.try_into_string().await?;","highlight_start":27,"highlight_end":55}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `Sized` is not implemented for `str`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"all local variables must have a statically known size","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"unsized locals are gated as an unstable feature","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the size for values of type `str` cannot be known at compilation time\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\json.rs:40:27\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let string_data = req.try_into_string().await?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the trait `Sized` is not implemented for `str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: all local variables must have a statically known size\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: unsized locals are gated as an unstable feature\u001b[0m\n\n"}
{"message":"the size for values of type `str` cannot be known at compilation time","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\json.rs","byte_start":1187,"byte_end":1188,"line_start":40,"line_end":40,"column_start":54,"column_end":55,"is_primary":true,"text":[{"text":"        let string_data = req.try_into_string().await?;","highlight_start":54,"highlight_end":55}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\json.rs","byte_start":1187,"byte_end":1188,"line_start":40,"line_end":40,"column_start":54,"column_end":55,"is_primary":false,"text":[{"text":"        let string_data = req.try_into_string().await?;","highlight_start":54,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `Sized` is not implemented for `str`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Break`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\ensel\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library/core/src/ops/control_flow.rs","byte_start":2973,"byte_end":2978,"line_start":93,"line_end":93,"column_start":5,"column_end":10,"is_primary":false,"text":[{"text":"    Break(B),","highlight_start":5,"highlight_end":10}],"label":"required by a bound in this variant","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\ensel\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library/core/src/ops/control_flow.rs","byte_start":2635,"byte_end":2641,"line_start":85,"line_end":85,"column_start":25,"column_end":31,"is_primary":true,"text":[{"text":"pub enum ControlFlow<B, C = ()> {","highlight_start":25,"highlight_end":31}],"label":"required by this bound in `Break`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the size for values of type `str` cannot be known at compilation time\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\json.rs:40:54\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let string_data = req.try_into_string().await?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the trait `Sized` is not implemented for `str`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Break`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library/core/src/ops/control_flow.rs:85:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m85\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub enum ControlFlow<B, C = ()> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Break`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m93\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Break(B),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound in this variant\u001b[0m\n\n"}
{"message":"the size for values of type `str` cannot be known at compilation time","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\json.rs","byte_start":1939,"byte_end":1943,"line_start":64,"line_end":64,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"        let data = res.try_into_string().await?;","highlight_start":13,"highlight_end":17}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `Sized` is not implemented for `str`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"all local variables must have a statically known size","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"unsized locals are gated as an unstable feature","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the size for values of type `str` cannot be known at compilation time\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\json.rs:64:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let data = res.try_into_string().await?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the trait `Sized` is not implemented for `str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: all local variables must have a statically known size\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: unsized locals are gated as an unstable feature\u001b[0m\n\n"}
{"message":"the size for values of type `str` cannot be known at compilation time","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\json.rs","byte_start":1946,"byte_end":1974,"line_start":64,"line_end":64,"column_start":20,"column_end":48,"is_primary":true,"text":[{"text":"        let data = res.try_into_string().await?;","highlight_start":20,"highlight_end":48}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `Sized` is not implemented for `str`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"all local variables must have a statically known size","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"unsized locals are gated as an unstable feature","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the size for values of type `str` cannot be known at compilation time\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\json.rs:64:20\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let data = res.try_into_string().await?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the trait `Sized` is not implemented for `str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: all local variables must have a statically known size\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: unsized locals are gated as an unstable feature\u001b[0m\n\n"}
{"message":"the size for values of type `str` cannot be known at compilation time","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\json.rs","byte_start":1973,"byte_end":1974,"line_start":64,"line_end":64,"column_start":47,"column_end":48,"is_primary":true,"text":[{"text":"        let data = res.try_into_string().await?;","highlight_start":47,"highlight_end":48}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\json.rs","byte_start":1973,"byte_end":1974,"line_start":64,"line_end":64,"column_start":47,"column_end":48,"is_primary":false,"text":[{"text":"        let data = res.try_into_string().await?;","highlight_start":47,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `Sized` is not implemented for `str`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Break`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\ensel\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library/core/src/ops/control_flow.rs","byte_start":2973,"byte_end":2978,"line_start":93,"line_end":93,"column_start":5,"column_end":10,"is_primary":false,"text":[{"text":"    Break(B),","highlight_start":5,"highlight_end":10}],"label":"required by a bound in this variant","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\ensel\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library/core/src/ops/control_flow.rs","byte_start":2635,"byte_end":2641,"line_start":85,"line_end":85,"column_start":25,"column_end":31,"is_primary":true,"text":[{"text":"pub enum ControlFlow<B, C = ()> {","highlight_start":25,"highlight_end":31}],"label":"required by this bound in `Break`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the size for values of type `str` cannot be known at compilation time\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\json.rs:64:47\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let data = res.try_into_string().await?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the trait `Sized` is not implemented for `str`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Break`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library/core/src/ops/control_flow.rs:85:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m85\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub enum ControlFlow<B, C = ()> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Break`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m93\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Break(B),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound in this variant\u001b[0m\n\n"}
{"message":"the size for values of type `str` cannot be known at compilation time","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\url.rs","byte_start":2224,"byte_end":2235,"line_start":76,"line_end":76,"column_start":13,"column_end":24,"is_primary":true,"text":[{"text":"        let string_data = req.try_into_string().await?;","highlight_start":13,"highlight_end":24}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `Sized` is not implemented for `str`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"all local variables must have a statically known size","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"unsized locals are gated as an unstable feature","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the size for values of type `str` cannot be known at compilation time\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\url.rs:76:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m76\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let string_data = req.try_into_string().await?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the trait `Sized` is not implemented for `str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: all local variables must have a statically known size\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: unsized locals are gated as an unstable feature\u001b[0m\n\n"}
{"message":"the size for values of type `str` cannot be known at compilation time","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\url.rs","byte_start":2238,"byte_end":2266,"line_start":76,"line_end":76,"column_start":27,"column_end":55,"is_primary":true,"text":[{"text":"        let string_data = req.try_into_string().await?;","highlight_start":27,"highlight_end":55}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `Sized` is not implemented for `str`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"all local variables must have a statically known size","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"unsized locals are gated as an unstable feature","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the size for values of type `str` cannot be known at compilation time\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\url.rs:76:27\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m76\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let string_data = req.try_into_string().await?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the trait `Sized` is not implemented for `str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: all local variables must have a statically known size\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: unsized locals are gated as an unstable feature\u001b[0m\n\n"}
{"message":"the size for values of type `str` cannot be known at compilation time","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\url.rs","byte_start":2265,"byte_end":2266,"line_start":76,"line_end":76,"column_start":54,"column_end":55,"is_primary":true,"text":[{"text":"        let string_data = req.try_into_string().await?;","highlight_start":54,"highlight_end":55}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\url.rs","byte_start":2265,"byte_end":2266,"line_start":76,"line_end":76,"column_start":54,"column_end":55,"is_primary":false,"text":[{"text":"        let string_data = req.try_into_string().await?;","highlight_start":54,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `Sized` is not implemented for `str`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Break`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\ensel\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library/core/src/ops/control_flow.rs","byte_start":2973,"byte_end":2978,"line_start":93,"line_end":93,"column_start":5,"column_end":10,"is_primary":false,"text":[{"text":"    Break(B),","highlight_start":5,"highlight_end":10}],"label":"required by a bound in this variant","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\ensel\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library/core/src/ops/control_flow.rs","byte_start":2635,"byte_end":2641,"line_start":85,"line_end":85,"column_start":25,"column_end":31,"is_primary":true,"text":[{"text":"pub enum ControlFlow<B, C = ()> {","highlight_start":25,"highlight_end":31}],"label":"required by this bound in `Break`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the size for values of type `str` cannot be known at compilation time\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\codec\\url.rs:76:54\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m76\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let string_data = req.try_into_string().await?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the trait `Sized` is not implemented for `str`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Break`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library/core/src/ops/control_flow.rs:85:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m85\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub enum ControlFlow<B, C = ()> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Break`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m93\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Break(B),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound in this variant\u001b[0m\n\n"}
{"message":"the size for values of type `str` cannot be known at compilation time","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\lib.rs","byte_start":13264,"byte_end":13268,"line_start":321,"line_end":321,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"                let text = res.try_into_string().await?;","highlight_start":21,"highlight_end":25}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `Sized` is not implemented for `str`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"all local variables must have a statically known size","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"unsized locals are gated as an unstable feature","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the size for values of type `str` cannot be known at compilation time\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\lib.rs:321:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m321\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let text = res.try_into_string().await?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the trait `Sized` is not implemented for `str`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: all local variables must have a statically known size\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: unsized locals are gated as an unstable feature\u001b[0m\n\n"}
{"message":"the size for values of type `str` cannot be known at compilation time","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\lib.rs","byte_start":13271,"byte_end":13299,"line_start":321,"line_end":321,"column_start":28,"column_end":56,"is_primary":true,"text":[{"text":"                let text = res.try_into_string().await?;","highlight_start":28,"highlight_end":56}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `Sized` is not implemented for `str`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"all local variables must have a statically known size","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"unsized locals are gated as an unstable feature","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the size for values of type `str` cannot be known at compilation time\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\lib.rs:321:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m321\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let text = res.try_into_string().await?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the trait `Sized` is not implemented for `str`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: all local variables must have a statically known size\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: unsized locals are gated as an unstable feature\u001b[0m\n\n"}
{"message":"the size for values of type `str` cannot be known at compilation time","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\lib.rs","byte_start":13298,"byte_end":13299,"line_start":321,"line_end":321,"column_start":55,"column_end":56,"is_primary":true,"text":[{"text":"                let text = res.try_into_string().await?;","highlight_start":55,"highlight_end":56}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\lib.rs","byte_start":13298,"byte_end":13299,"line_start":321,"line_end":321,"column_start":55,"column_end":56,"is_primary":false,"text":[{"text":"                let text = res.try_into_string().await?;","highlight_start":55,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"C:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `Sized` is not implemented for `str`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Break`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\ensel\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library/core/src/ops/control_flow.rs","byte_start":2973,"byte_end":2978,"line_start":93,"line_end":93,"column_start":5,"column_end":10,"is_primary":false,"text":[{"text":"    Break(B),","highlight_start":5,"highlight_end":10}],"label":"required by a bound in this variant","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\ensel\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library/core/src/ops/control_flow.rs","byte_start":2635,"byte_end":2641,"line_start":85,"line_end":85,"column_start":25,"column_end":31,"is_primary":true,"text":[{"text":"pub enum ControlFlow<B, C = ()> {","highlight_start":25,"highlight_end":31}],"label":"required by this bound in `Break`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the size for values of type `str` cannot be known at compilation time\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\server_fn-0.6.3\\src\\lib.rs:321:55\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m321\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let text = res.try_into_string().await?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the trait `Sized` is not implemented for `str`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Break`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ensel\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library/core/src/ops/control_flow.rs:85:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m85\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub enum ControlFlow<B, C = ()> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Break`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m93\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Break(B),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound in this variant\u001b[0m\n\n"}
{"message":"aborting due to 48 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 48 previous errors\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0277, E0562, E0706.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mSome errors have detailed explanations: E0277, E0562, E0706.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about an error, try `rustc --explain E0277`.\u001b[0m\n"}
